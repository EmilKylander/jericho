#!/bin/python3
import logging
import typing
import html2text
import re
import html
from bs4 import BeautifulSoup
from validate_email import validate_email
import urllib.parse
import cchardet
import json
import base64

modules = """"""

class Analyzer:
    def searchRegex(self, pattern, content):
        return re.search(pattern, content)

    def findTech(self, site, modules):
        matches = []
        soup = BeautifulSoup(site['html'], 'lxml')
        generator = soup.find("meta",  attrs={'name':'generator'})
        site['headers'] = site['headers'].lower()
        site['html'] = site['html'].lower()
        for module in modules:
            version = ""
            plugin = ""
            theme = ""
            if module['type'] == 'generator':
                found = 0
                for match_tech in matches:
                    if match_tech['technology'] == module['name']:
                        found = 1

                if not generator:
                    continue
                try:
                    content = generator['content']
                except:
                    continue
                match = re.search(module['pattern'].lower(), content.lower())

                if match and found == 0:
                    if module['version_pattern']:
                        version = self.searchRegex(module['version_pattern'], site['html'])
                        if version:
                            version = version.group(1)
                    if module['theme_pattern']:
                        theme = self.searchRegex(module['theme_pattern'], site['html'])
                        if theme:
                            theme = theme.group(1)
                    if module['plugins_pattern']:
                        plugin = self.searchRegex(module['plugins_pattern'], site['html'])
                        if plugin:
                            plugin = plugin.group(1)
                    matches.append({'technology': module['name'], 'version': version, 'theme': theme, 'plugins': plugin})
                    continue

            if module['type'] == 'headers':
                match = self.searchRegex(module['pattern'], site['headers'])
                for match_tech in matches:
                    found = 0
                    if match_tech['technology'] == module['name']:
                        found = 1
                if match and found == 0:
                    if module['version_pattern']:
                        version = self.searchRegex(module['version_pattern'], site['headers'])
                        if version:
                            version = version.group(1)
                    if module['theme_pattern']:
                        theme = self.searchRegex(module['theme_pattern'], site['headers'])
                        if theme:
                            theme = theme.group(1)
                    if module['plugins_pattern']:
                        plugin = self.searchRegex(module['plugins_pattern'], site['headers'])
                        if plugin:
                            plugin = plugin.group(1)
                    matches.append({'technology': module['name'], 'version': version, 'theme': theme, 'plugins': plugin})
                    continue
            if module['type'] == 'regex':
                match = self.searchRegex(module['pattern'], site['html'])
                found = 0
                for match_tech in matches:
                    if match_tech['technology'] == module['name']:
                        found = 1
                if match and found == 0:
                    if module['version_pattern']:
                        try:
                            version = self.searchRegex(module['version_pattern'], site['html'])
                        except:
                            version = False
                        if version:
                            version = version.group(1)
                    if module['theme_pattern']:
                        theme = self.searchRegex(module['theme_pattern'], site['html'])
                        if theme:
                            theme = theme.group(1)
                    if module['plugins_pattern']:
                        plugin = self.searchRegex(module['plugins_pattern'], site['html'])
                        if plugin:
                            plugin = plugin.group(1)
                    matches.append({'technology': module['name'], 'version': version, 'theme': theme, 'plugins': plugin})
                    continue
        
        if len(matches) == 0:
            return []

        return matches


class Identifier:
    def __init__(self):
        self.modules = json.loads(base64.b64decode(modules))

    def _get_text(self, url: str, site_html: str) -> str:
        logging.debug("Getting the raw text")
        try:
            h = html2text.HTML2Text()
            h.ignore_links = True
            h.ignore_images = True
            return (
                h.handle(site_html)
                .replace("\n", " ")
                .replace("\r", "")
                .replace("*", "")
                .replace("#", "")
                .replace("_", "")
                .strip()
            )
        except Exception as err:
            logging.warning(f"Could not get text from {url} because of error {err}")
            return ""

    def _get_description(self, url: str, soup: BeautifulSoup) -> str:
        logging.debug("Getting the description")
        description = soup.find("meta", attrs={"name": "description"})

        if not description:
            return ""

        try:
            return html.unescape(
                description["content"].replace("\n", "").replace("\r", "")
            )
        except Exception as err:
            logging.warning(
                f"Could not get the meta description from {url} because of error {err}"
            )
            return ""

    def _get_contact_info(self, soup: BeautifulSoup) -> dict:
        logging.debug("Getting the contact info")

        links = soup.find_all("a")
        emails = []
        phones = []

        for link in links:
            try:
                currentLink = link.get("href")

                if "?" in currentLink:
                    currentLink = currentLink.split("?")[0]

                if "tel:" in currentLink:
                    phones.append(currentLink.replace("tel:", ""))
                elif "mailto:" in currentLink:
                    parsed = validate_email(currentLink.replace("mailto:", ""))
                    if parsed:
                        emails.append(currentLink.replace("mailto:", ""))
            except:
                continue

        return {"phones": list(set(phones)), "emails": list(set(emails))}

    def _get_title(self, site_html: str) -> str:
        logging.debug("Getting the title")
        title = ""
        pat = re.compile("<title>(.*?)<\/title>")

        get_title = pat.search(site_html.replace("\n", "").replace("\r", "").lower())
        if get_title:
            title = html.unescape(get_title.group(1))

        return title

    def _get_google_tracking_code(self, html: str) -> str:
        logging.debug("Getting the google analytics code")
        tracking_code = re.findall(r"ga\('create', '(.*)', 'auto'\);", html)
        if tracking_code:
            return tracking_code[0]

        tracking_code_alt = re.findall(r"'_setAccount','(.*?)'", html)
        if tracking_code_alt:
            return tracking_code_alt[0]

        return ""

    def _get_domains(self, soup: BeautifulSoup) -> typing.List[str]:
        logging.debug("Getting the domains")
        links = [a.get("href") for a in soup.find_all("a", href=True)]
        domains = []
        for link in links:
            try:
                parsed_uri = urllib.parse.urlsplit(link)
            except:
                pass
            if parsed_uri.scheme == "http" or parsed_uri.scheme == "https":
                domains.append(parsed_uri.scheme + "://" + parsed_uri.netloc)

        return list(set(domains))

    def run(self, ip: str, url: str, status: int, headers: str, site_html: str) -> dict:
        soup = BeautifulSoup(site_html, "lxml")
        contact_info = self._get_contact_info(soup)

        analyze = Analyzer()

        techs = analyze.findTech({
            'headers': headers,
            'html': site_html},
             self.modules)

        return {
            "status": status,
            "headers": headers,
            "domain": url,
            "tech": techs,
            "domains_found": self._get_domains(soup),
            "title": self._get_title(site_html),
            "description": self._get_description(url, soup),
            "phones": contact_info.get("phones"),
            "emails": contact_info.get("emails"),
            "ip": ip,
            "google_tracking_code": self._get_google_tracking_code(site_html),
            "text_content": self._get_text(url, site_html),
            "bytes": len(site_html),
        }